name: Create Release
env:
  DOCKER_IMAGE: wyrihaximusgithubactions/wait-for-status
  MILESTONE: ${{ github.event.milestone.title }}
on:
  milestone:
    types:
      - closed
jobs:
  wait-for-status-checks:
    name: Wait for status checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: sleep 13
      - name: 'Wait for status checks'
        id: waitforstatuschecks
        uses: WyriHaximus/github-action-wait-for-status@v1
        with:
          ignoreActions: "Wait for status checks,Create Release"
          checkInterval: 5
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      - id: generate-version-strategy
        if: steps.waitforstatuschecks.outputs.status != 'success'
        name: Fail
        run: exit 1
  generate-version-strategy:
    name: Generate Version Strategy
    needs:
      - wait-for-status-checks
    runs-on: ubuntu-latest
    outputs:
      docker_versions: ${{ steps.generate-version-strategy.outputs.docker_versions }}
      tag_versions: ${{ steps.generate-version-strategy.outputs.tag_versions }}
    steps:
      - uses: actions/checkout@v1
      - uses: WyriHaximus/github-action-break-up-semver@v1
        id: breakupsemver
        with:
          version: ${{ env.MILESTONE }}
      - id: generate-version-strategy
        name: Generate Versions
        env:
          MAJOR: ${{ steps.breakupsemver.outputs.v_major }}
          MAJOR_MINOR: ${{ steps.breakupsemver.outputs.v_major_minor }}
          MAJOR_MINOR_PATCH: ${{ steps.breakupsemver.outputs.v_major_minor_patch }}
        run: |
          echo "::set-output name=docker_versions::[\"${MAJOR}\",\"${MAJOR_MINOR}\",\"${MAJOR_MINOR_PATCH}\"]"
          git tag > tag.list
          cat tag.list
          printf "::set-output name=tag_versions::%s" $(jq --raw-input --slurp 'split("\n")' tag.list -c | php -r "echo json_encode(array_values(array_diff_assoc(json_decode('[\"${MAJOR}\",\"${MAJOR_MINOR}\",\"${MAJOR_MINOR_PATCH}\"]'), json_decode(stream_get_contents(STDIN)))));")
  generate-changelog:
    name: Generate Changelog
    needs:
      - generate-version-strategy
    runs-on: ubuntu-latest
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Generate changelog
        uses: WyriHaximus/github-action-jwage-changelog-generator@v1
        id: changelog
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          milestone: ${{ env.MILESTONE }}
      - name: Show changelog
        run: echo "${CHANGELOG}"
        env:
          CHANGELOG: ${{ steps.changelog.outputs.changelog }}
  tag-docker-image:
    name: Tag Docker image for version ${{ matrix.version }}
    needs:
      - generate-version-strategy
    strategy:
      fail-fast: false
      matrix:
        version: ${{ fromJson(needs.generate-version-strategy.outputs.docker_versions) }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true
      - name: Inspect builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"
      - run: echo "ghcr.io/${GITHUB_REPOSITORY}:sha-${GITHUB_SHA}" | tr '[:upper:]' '[:lower:]'
      - name: Login to GPR
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | \
          docker login ghcr.io \
            --username "WyriHaximus" \
            --password-stdin
          printf "FROM %s" $(echo "ghcr.io/${GITHUB_REPOSITORY}:sha-${GITHUB_SHA}" | tr '[:upper:]' '[:lower:]') >> Dockerfile.tag
          docker build --platform=linux/arm/v7,linux/arm64,linux/amd64 --output=type=registry --no-cache -f Dockerfile.tag -t $(echo "ghcr.io/${GITHUB_REPOSITORY}:${{ matrix.version }}" | tr '[:upper:]' '[:lower:]') .
  create-release:
    name: Create Release
    needs:
      - generate-version-strategy
      - tag-docker-image
      - generate-changelog
    strategy:
      fail-fast: false
      matrix:
        version: ${{ fromJson(needs.generate-version-strategy.outputs.tag_versions) }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Create release/${{ matrix.version }} branch
        run: git checkout -b release/${{ matrix.version }} ${GITHUB_SHA}
      - run: sed -i 's/master/${{ matrix.version }}/g' Dockerfile
      - run: cat Dockerfile
      - run: git add Dockerfile
      - run: git status
      - run: echo -e "${CHANGELOG}" > release-${{ matrix.version }}-changelog.md
        env:
          CHANGELOG: ${{ needs.generate-changelog.outputs.changelog }}
      - run: |
          echo -e "${MILESTONE_DESCRIPTION}\r\n\r\n${CHANGELOG}" > release-${{ matrix.version }}-release-message.md
          cat release-${{ matrix.version }}-release-message.md
          release_message=$(cat release-${{ matrix.version }}-release-message.md)
          release_message="${release_message//'%'/'%25'}"
          release_message="${release_message//$'\n'/'%0A'}"
          release_message="${release_message//$'\r'/'%0D'}"
          echo "::set-output name=release_message::$release_message"
        id: releasemessage
        env:
          MILESTONE_DESCRIPTION: ${{ github.event.milestone.description }}
          CHANGELOG: ${{ needs.generate-changelog.outputs.changelog }}
      - run: cat release-${{ matrix.version }}-changelog.md
      - name: Set git commit user
        run: |
          git config user.name '${{ github.actor }}'
          git config user.email '${{ github.actor }}@users.noreply.github.com'
      - run: git commit -F release-${{ matrix.version }}-changelog.md
      - run: git tag -F release-${{ matrix.version }}-changelog.md ${{ matrix.version }}
      - name: Push changes
        uses: ad-m/github-push-action@v0.6.0
        with:
          tags: true
          branch: release/${{ matrix.version }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Reference Release with Changelog
        if: ${{ matrix.version == env.MILESTONE }}
        uses: fleskesvor/create-release@feature/support-target-commitish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ matrix.version }}
          release_name: ${{ matrix.version }}
          body: ${{ steps.releasemessage.outputs.release_message }}
          draft: false
          prerelease: false
          commitish: release/${{ matrix.version }}
      - name: Create Release with Changelog
        if: ${{ matrix.version != env.MILESTONE }}
        uses: fleskesvor/create-release@feature/support-target-commitish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ matrix.version }}
          release_name: ${{ matrix.version }}
          body: |
            Reference tag to ${{ env.MILESTONE }}

            Note: this tag will not be updated when new v1.x.x releases are tagged. Instead, it relies on providing the latest v1.x.x releases through mutable Docker image tags. Please see Docker Hub and compare the latest 3 versions and their hashes.
          draft: false
          prerelease: false
          commitish: release/${{ matrix.version }}
      - name: Delete release/${{ matrix.version }} branch
        uses: dawidd6/action-delete-branch@v3
        with:
          github_token: ${{github.token}}
          branches: release/${{ matrix.version }}
